import os
import json
from services.protobuffer_service import json_to_protobuff
from services.queue_service import PikaClient
from dohko.circuits.circuit import LayeredCircuit
from dohko.prover.prover import ZkProver

async def generate_proof(consumer_id: str, proof_request_id: str, proof_provider: str, chunk_id, chunk: str):
    print('Generating proof for chunk ' + str(chunk_id) + ' of proof request ' + proof_request_id + ' using worker: ' + consumer_id)
    layered_circuit = LayeredCircuit()
    layered_circuit.from_protobuf(json_to_protobuff(chunk))

    print(layered_circuit.circuit[10].bitLength)
    print(layered_circuit.circuit[0].gates[0].ty)
    print(layered_circuit.circuit[0].gates[0].l)
    print(layered_circuit.circuit[0].gates[0].u)
    print(layered_circuit.circuit[0].gates[0].v)

    # Generate proof for the chunk using "circuit"
    prover = ZkProver(layered_circuit)
    prover.prove()
    proof = prover.proof_transcript.to_bytes()
    print(proof)

    # pika_client = PikaClient(os.environ.get('RABBITMQ_URL'))

    # await pika_client.publish("proofs_queue", json.dumps({
    #     'proof_request_id': proof_request_id,
    #     'chunk_id': chunk_id,
    #     'proof': 'proof for chunk ' + str(chunk_id) + ' of proof request ' + proof_request_id + ' generated by worker: ' + consumer_id
    # }))

    return None
